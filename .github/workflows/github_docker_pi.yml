name: CICD via Docker Hub to Raspberry Pi

# Controls when the workflow will run
on:
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/arm/v7,linux/amd64
      
      #- name: Available platforms QEMU
      #  run: echo ${{ steps.qemu.outputs.platforms }}
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      #- name: Available platforms buildx
      #  run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/arm/v7 #,linux/amd64
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/personal-website:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
        
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.PI_DOMAIN }}
          port: 22
          username: ${{ secrets.PI_USERNAME }}
          password: ${{ secrets.PI_PASSWORD }}
          script: |
            contId=$(docker ps | grep luispflamminger/personal-website | grep -o '^\S*')
            docker stop $contId
            docker rm $contId
            docker run -d \
            -p 80:80 \
            -p 443:443 \
            --platform linux/arm/v7 \
            --mount type=bind,src=/home/pi/personal-website/ssl/certs,dst=/etc/nginx/ssl/certs \
            --mount type=bind,src=/home/pi/personal-website/ssl/private,dst=/etc/nginx/ssl/private \
            luispflamminger/personal-website 
          
